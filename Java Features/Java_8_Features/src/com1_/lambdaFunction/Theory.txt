1-> Lambda Expression

Lambda Expression is enhancement of Anonymous class.
Lambda expression provide a clean an concise way of implementing single-method interface.
Reduce the length of code using lambda expression

Anonymous Class -->>> A class that has no name is known as an anonymous inner class in Java. 
						It should be used if you have to override a method of class or interface and abstract interface
						
					OR 
			An anonymous class is an inner class without a name.
			A nested class that doesn't hava any name is know as an anonymous class

-->>Java lambda expression is treated as a function, so compiler does not create .class file.
->Why use Lambda Expression
->1.To provide the implementation of Functional interface.
->2.Less coding.

(argument-list) -> {body}-->>syntax


	
How compiler generate the class or anonymous class
-> It will generate the static class extend the person class ex->

static class TestAnonymousClass extends Person {
	
	public TestAnonymousClass() {
	}
	
	void eat() {
		System.out.println("Person class eat method");
	}
}

How compiler generate the class or anonymous class for interface
static class TestAnonymousClass implements Eatable {

public TestAnonymousClass() {
	}

public void eat() {
	System.out.println("Interface Eatable method called");
	}
}
-> A class is created, but its name is decided by the compiler, which implements the Eatable interface and provides the implementation of the eat() method.
-> An object of the Anonymous class is created that is referred to by 'p', a reference variable of the Eatable type.

						