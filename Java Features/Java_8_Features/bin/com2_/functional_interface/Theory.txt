Function Interface --->>> Before java8 In functional Interface we can define only one method without body.

-->>After java8 we can define an numbers of methods in functional interface, But Rule is only is the
	the methods are "static" and "default". 
	
-->>And we can only also define functional Interface with the help of annotation at the top of interface.
	like-->> @FunctionalInterface
	
-->>After having default and static methods inside the interface,
	we think about the need of abstract class in Java. 
	An interface and an abstract class is almost similar except that you can create 
	constructor in the abstract class whereas you can't do this in interface.
	
What is Defference Between default and static Methods
sol-->> we can overrider the dafault methods but in The case of static method we can't override static method

ex-> 

start -> (
	abstract class AbstractClass{    
    public AbstractClass() {        // constructor    
        System.out.println("You can create constructor in abstract class");    
    }    
    abstract int add(int a, int b); // abstract method    
    int sub(int a, int b){      // non-abstract method    
        return a-b;    
    }    
    static int multiply(int a, int b){  // static method    
        return a*b;    
    }    
}    
public class AbstractTest extends AbstractClass{    
    public int add(int a, int b){        // implementing abstract method    
        return a+b;    
    }    
    public static void main(String[] args) {    
        AbstractTest a = new AbstractTest();    
        int result1 = a.add(20, 10);    // calling abstract method    
        int result2 = a.sub(20, 10);    // calling non-abstract method    
        int result3 = AbstractClass.multiply(20, 10); // calling static method    
        System.out.println("Addition: "+result1);    
        System.out.println("Substraction: "+result2);    
        System.out.println("Multiplication: "+result3);    
    }    
}    

)-> end