package com.core_java;

public class String_Buffer_Builder {

	public static void main(String[] args) {

		//Question
//		String name = new String();
//		name = "sumit";
//		String name1 = "sumit";
//		System.out.println(name==name1);
		
		
		//String -->> Imuttable
//		String s = new String("sumit");
//		System.out.println(s.hashCode()); // 109798582
//		String s1 = "sumit";
//		System.out.println(s==s1);
//		System.out.println(s.equals(s1));
//		s = s + "gond"; // here string creating a new object in heap and change the address of the reference, first will be collected by the garbage collector
//		System.out.println(s.hashCode()); //1416534612 here prove string are immutable in nature
		
		
		//String Buffer -->> Mutable and Thread Safe(mean one thread at a time)
		StringBuffer buffer = new StringBuffer();
		StringBuffer buffer1 = new StringBuffer("sumit");
//		StringBuffer bu = "sumit"; // This line giving a error because we can't assign value StringBuffer like this;
//		String bu = "sumit"; 
//		String bu1 = new String("sumit");
//		System.out.println(buffer == bu);//give error
//		System.out.println(buffer == bu1); //give error   Incompatible operand types StringBuffer and String
		
//		System.out.println(buffer.capacity()); // Inital capacity -> 16
//		System.out.println(buffer1.capacity()); // Inital capacity -> 21
//		
//		StringBuffer append = buffer1.append(4); // here StringBuffer is not creating new object, it's changing in existing object
//		System.out.println(append.hashCode()); //1651191114
//		System.out.println(buffer1.hashCode());//1651191114 here prove StringBuffer are mutable in nature
//		System.out.println(append == buffer1);
		
		
		//StringBuilder -->> Mutable and Not Thread Safe(mean multiple thread at a time)
		StringBuilder builder = new StringBuilder("sumit");
		System.out.println(builder.capacity());
		
		
	}

}
